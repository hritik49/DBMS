-- Create Stud_Marks table
CREATE TABLE Stud_Marks (
    name VARCHAR2(100),
    total_marks NUMBER
);

-- Create Result table
CREATE TABLE Result (
    Roll NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    Class VARCHAR2(50)
);

-- Creating the stored procedure for categorization
CREATE OR REPLACE PROCEDURE proc_Grade (p_name IN VARCHAR2, p_marks IN NUMBER) IS
    v_class VARCHAR2(50);
BEGIN
    -- Categorization based on marks
    IF p_marks >= 990 AND p_marks <= 1500 THEN
        v_class := 'Distinction';
    ELSIF p_marks >= 900 AND p_marks <= 989 THEN
        v_class := 'First Class';
    ELSIF p_marks >= 825 AND p_marks <= 899 THEN
        v_class := 'Higher Second Class';
    ELSE
        v_class := 'Fail'; -- For any student who doesn't fall in these ranges
    END IF;

    -- Inserting the result into the Result table
    INSERT INTO Result (Roll, Name, Class)
    VALUES (Result_SEQ.NEXTVAL, p_name, v_class); -- Assuming a sequence `Result_SEQ` exists for generating Roll number
    
    COMMIT; -- Commit the transaction
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

DECLARE
    v_name VARCHAR2(100);
    v_marks NUMBER;
BEGIN
    -- Example 1
    v_name := 'John Doe';
    v_marks := 1200;
    -- Calling the stored procedure
    proc_Grade(v_name, v_marks);

    -- Example 2
    v_name := 'Mary Smith';
    v_marks := 950;
    proc_Grade(v_name, v_marks);

    -- Example 3
    v_name := 'Peter Brown';
    v_marks := 875;
    proc_Grade(v_name, v_marks);

    -- Example 4
    v_name := 'Sara Lee';
    v_marks := 800;
    proc_Grade(v_name, v_marks);

    -- Example 5
    v_name := 'Tom Wilson';
    v_marks := 1000;
    proc_Grade(v_name, v_marks);

    -- Commit after all insertions
    COMMIT;
END;
/

-- Create Sequence for Roll number
CREATE SEQUENCE Result_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
